snippet ca
  case ${1} => ${2}

############################
##playframework
#
#play controller
snippet p.sp
  import org.specs2.mutable._
  import org.specs2.runner._
  import org.junit.runner._

  import play.api.test._
  import play.api.test.Helpers._

  @RunWith(classOf[JUnitRunner])
  class ${1:class}Spec extends Specification {
  }

snippet p.c
    package ${1:package}

    import play.api._
    import play.api.mvc._
    import play.api.data._
    import play.api.data.format._
    import play.api.data.Forms._
    import play.api.libs.Files._

    object ${2:controllers} extends Controller {
    ${3:/* code */}	
    }

snippet p.m
    val ${1}Form = Form[${2:class}](
      mapping(
      )(${3:class}.apply)(${4:class}.unapply)
    )

snippet p.a
    def ${1:method} = Action {
      Ok(views.html.${2:view})
    }

snippet p.b
    ${1:form}.bindFromRequest.fold(
    { formWithErrors => BadRequest(${2:html}(formWithErrors)},
    { ${3:form} => })

snippet i.sl
    import org.openqa.selenium._
    import firefox._
    import java.util.concurrent.TimeUnit
    import org.openqa.selenium.support.ui._
    import org.openqa.selenium.support.ui.ExpectedConditions._
    import org.openqa.selenium.interactions._

snippet i.s
    import org.scalatest.FlatSpec                                                                                                                                                                                                                                                 
    import org.scalatest.matchers._

snippet spec
  import org.scalatest.{ FunSpec, Matchers }
  import org.scalatest.matchers._

  class ${1:class}Spec extends FunSpec with Matchers {
  describe("${2:describe}") {
    it("${3:behavior}") {
    }
  }

